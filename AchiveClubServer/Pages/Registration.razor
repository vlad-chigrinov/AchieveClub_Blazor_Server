@page "/registration"

@using Tewr.Blazor.FileReader

@inject RegistrationService _registration
@inject NavigationManager _navigation
@inject ClubNamesService _clubNamesService
@inject ImageLoader _imageLoader

@inject IFileReaderService fileReaderService

@inject IDialogService Dialog

<!-----------------------------------nav----------------------------------------->
<header>
    <div class="header-wrapper">
        <div class="img">
            <img src="./image/gllg.png" alt="">
        </div>
        <div class="text-wrapper">
            <h3>
                @*<b>AchieveClub</b> for <m>It_Club</m>*@
                <b>Система достижений</b>
            </h3>
        </div>
    </div>
</header>


<!-----------------------------------main----------------------------------------->
<main>
    <div class="content-wrapper">
        <div class="headingWrapper">
            <h3 style="margin-top:0 !important;">Зарегистрироваться</h3>
            <MudDivider Style="color:black;border: 1px solid black" />
        </div>
        <div class="registerForm">
            <p><a @onclick="ToLogin">Войти в систему</a></p>
        </div>
        <div class="emailForm">
            <MudTextField @bind-Value="_registrationParams.FirstName" Label="Имя" Variant="Variant.Outlined" Adornment="Adornment.None" AdornmentIcon="@Icons.Material.Filled.Person" />
        </div>
        <div class="emailForm">
            <MudTextField @bind-Value="_registrationParams.LastName" Label="Фамилия" Variant="Variant.Outlined" Adornment="Adornment.None" AdornmentIcon="@Icons.Material.Filled.Person" />
        </div>
        <div class="emailForm">
            <MudTextField @bind-Value="_registrationParams.Email" Label="Email" Variant="Variant.Outlined" Adornment="Adornment.None" AdornmentIcon="@Icons.Material.Filled.Email" />
        </div>
        <div class="emailForm">
            <MudFileUpload T="IBrowserFile" Accept=".png, .jpg, .jpeg" FilesChanged="UploadFile" MaximumFileCount="1">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                               FullWidth="true"
                               Variant="Variant.Filled"
                               Style="background: #4E9BDA !important;
                                color: white !important;
                                height: 45px !important;
                                font-weight: bold;
                                font-family: 'Play', sans-serif;"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="@context.Id">
                        Загрузить изображение
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
            @if (_avatarImageProcessed)
            {
                <div id="inputFileImg-cont">
                    <img src=@_registrationParams.Avatar style="border-radius:50%; width:200px; height:200px; margin: 0 auto" />
                </div>
            }
        </div>
        <div class="emailForm">
            <MudSelect Margin="Margin.Dense" T="string" Label="Место обучения" Variant="Variant.Outlined" @bind-Value="_selectedClubTitle">
                @foreach (var clubName in _clubNames) {
                    <MudSelectItem Value="@clubName.Title"/>
                }
            </MudSelect>
        </div>
        <div class="passwordForm">
            <MudTextField Style="height:55px;" @bind-Value="_registrationParams.Password" Label="Пароль" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonPassClick" AdornmentAriaLabel="Show Password" />
        </div>
        <div class="passwordForm">
            <MudTextField Style="height:55px;" @bind-Value="_passwordSubmit" Label="Подтверждение пароля" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonPassClick" AdornmentAriaLabel="Show Password" />
        </div>
        <div class="submitButton">
            <MudButton Variant="Variant.Outlined"
                       Style="background: #4E9BDA !important;
                        color: white !important;
                        font-family: 'Play', sans-serif !important;
                        height: 45px !important;
                        font-size: large !important;
                        font-weight: bold !important;
                        border:none !important;"
                        FullWidth="true" ButtonType="ButtonType.Submit" @onclick="Registrate">Зарегистрироваться</MudButton>
        </div>
        <p style="color:red;">@_resultMessage</p>
    </div>
</main>

@code
{

    private string _selectedClubTitle = "";
    private ElementReference inputTypeFileElement;

    private bool _avatarImageProcessed = false;

    private string _resultMessage = "";
    private string _passwordSubmit = "";

    private RegisterParams _registrationParams = new RegisterParams() { ClubRefId = 1};

    private List<ClubNameInfo> _clubNames;

    protected override void OnInitialized()
    {
        GetClubNames();
    }

    private void GetClubNames()
    {
        _clubNames = _clubNamesService.GetAll();
    }

    private void ChangeSelectItem(ChangeEventArgs value)
    {
        string title = (string)value.Value;
        int id = _clubNames.First(it => it.Title == title).Id;
        _registrationParams.ClubRefId = id;
    }

    private async Task Registrate()
    {
        _registrationParams.ClubRefId = _clubNames.First(it => it.Title == _selectedClubTitle).Id;
        if (string.IsNullOrWhiteSpace(_registrationParams.FirstName))
        {
            _resultMessage = "Введите имя!";
        }
        else if (string.IsNullOrWhiteSpace(_registrationParams.LastName))
        {
            _resultMessage = "Введите фамилию!";
        }
        else if (string.IsNullOrWhiteSpace(_registrationParams.Email) || _registrationParams.Email.Contains("@") == false)
        {
            _resultMessage = "Введите электронную почту!";
        }
        else if (string.IsNullOrWhiteSpace(_registrationParams.Avatar))
        {
            _resultMessage = "Загрузите свою фотографию!";
        }
        else if (_registrationParams.ClubRefId < 1)
        {
            _resultMessage = "Выберите клуб!";
        }
        else if (string.IsNullOrWhiteSpace(_registrationParams.Password))
        {
            _resultMessage = "Введите пароль!";
        }
        else if (_registrationParams.Password != _passwordSubmit)
        {
            _resultMessage = "Пароли не совпадают!";
        }
        else
        {
            if (await _registration.Registrate(_registrationParams))
            {
                _resultMessage = "Вы вошли! Перенаправление на вашу страницу...";
                _navigation.NavigateTo("/");
            }
            else
            {
                _resultMessage = "Ошибка регистрации. Возможно пользователь с таким Email уже зарегистрирован!";
            }
        }

    }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonPassClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task UploadFile(IBrowserFile file)
    {
        _registrationParams.Avatar = await _imageLoader.CreateImage(file, "avatars");
        _avatarImageProcessed = true;
    }

    private void ToLogin()
    {
        _navigation.NavigateTo("/login");
    }
}